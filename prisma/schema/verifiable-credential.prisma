// https://www.imsglobal.org/spec/ob/v3p0#org.1edtech.ob.v3p0.proof.class
// A JSON-LD Linked Data proof.
model Proof {
    id                 String    @id @default(auto()) @map("_id") @db.ObjectId
    // 	'type' = Signature suite used to produce proof. [1]
    type               String
    // 'date' = Date the proof was created. [0..1]
    created            DateTime?
    // 'cryptosuite' = The suite used to create the proof.[0..1]
    cryptosuite        String?
    // 'challenge' = 	A value chosen by the verifier to mitigate authentication proof replay attacks. [0..1]
    challenge          String?
    // 'domain' = 	The domain of the proof to restrict its use to a particular target. [0..1]
    domain             String?
    // 'nonce' = A value chosen by the creator of proof to randomize proof values for privacy purposes. [0..1]
    nonce              String?
    // 'proofPurpose' = The purpose of the proof to be used with verificationMethod. MUST be 'assertionMethod'. [0..1]
    proofPurpose       String?
    // 'proofValue' = Value of the proof. [0..1]
    proofValue         String?
    // 'verificationMethod' = The URL of the public key that can verify the signature. [0..1]
    verificationMethod String?

    // Model relationships
    EndorsementCredential   EndorsementCredential? @relation(fields: [endorsementCredentialId], references: [docId])
    endorsementCredentialId String?                @db.ObjectId
    AchievementCredential   AchievementCredential? @relation(fields: [achievementCredentialId], references: [docId], name: "achievementCredential")
    achievementCredentialId String?                @db.ObjectId
    VerifiableCredential    VerifiableCredential?  @relation(fields: [verifiableCredentialId], references: [docId], name: "verifiableCredential")
    verifiableCredentialId  String?                @db.ObjectId

    // *NOTE: This class can be extended with additional properties.
}

// https://www.imsglobal.org/spec/ob/v3p0/#achievementsubject
// A collection of information about the recipient of an achievement. Maps to Credential Subject in [VC-DATA-MODEL-2.0].
model AchievementSubject {
    docId                String           @id @default(auto()) @map("_id") @db.ObjectId
    // An identifier for the Credential Subject. Either id or at least one identifier MUST be supplied.	[0..1]
    id               String?
    // 'type' = The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'AchievementSubject'.	[1..*]
    type              String[]
    // 'activityEndDate' = The datetime the activity ended.	[0..1]
    activityEndDate   DateTime?
    // 'activityStartDate' = The datetime the activity started.	[0..1]
    activityStartDate DateTime?
    // 'creditsEarned' = The number of credits earned, generally in semester or quarter credit hours. This field correlates with the Achievement creditsAvailable field.	[0..1]
    creditsEarned     Float?
    // 'achievement' = The achievement being awarded.	[1]
    achievement       Achievement      @relation(fields: [achievementId], references: [docId])
    achievementId     String           @db.ObjectId
    // 'identifier = Other identifiers for the recipient of the achievement. Either id or at least one identifier MUST be supplied.	[0..*]
    identifier        IdentityObject[] @relation("achievementSubject") //optional
    // 'image' = An image representing this user's achievement. If present, this must be a PNG or SVG image, and should be prepared via the 'baking' instructions. An 'unbaked' image for the achievement is defined in the Achievement class and should not be duplicated here.	[0..1]
    image             Image?           @relation(fields: [imageId], references: [docId])
    imageId           String?          @db.ObjectId
    // 'licenseNumber' = The license number that was issued with this credential.	[0..1]
    licenseNumber     String?
    // 'narrative = A narrative that connects multiple pieces of evidence. Likely only present at this location if evidence is a multi-value array. Can be a markdown.	[0..1]
    narrative         String?
    // 'result' = The set of results being asserted.	[0..*]
    result            Result[]         @relation("achievementSubject") //optional
    // 'role' = Role, position, or title of the learner when demonstrating or performing the achievement or evidence of learning being asserted. Examples include 'Student President', 'Intern', 'Captain', etc.	[0..1]
    role              String?
    // 'source' = The person, organization, or system that assessed the achievement on behalf of the issuer. For example, a school may assess the achievement, while the school district issues the credential.	[0..1]
    source            Profile?         @relation(fields: [assessorId], references: [docId])
    assessorId        String?          @db.ObjectId
    // 'term' = The academic term in which this assertion was achieved.	[0..1]
    term              String?

    // Model relationships
    AchievementCredential AchievementCredential[]

    // *NOTE: This class can be extended with additional properties.
    profile AchievementSubjectProfile?
}

// https://www.imsglobal.org/spec/ob/v3p0/#identityobject
// A collection of information about the recipient of an achievement.
model IdentityObject {
    id           String         @id @default(auto()) @map("_id") @db.ObjectId
    // 'type' = MUST be the IRI 'IdentityObject'.	[1]
    type         String         @default("IdentityObject")
    // 'hashed' = Whether or not the identityHash value is hashed.	[1]
    hashed       Boolean
    // 'identityHash' = Either the IdentityHash of the identity or the plaintext value. If it's possible that the plaintext transmission and storage of the identity value would leak personally identifiable information where there is an expectation of privacy, it is strongly recommended that an IdentityHash be used.	[1]
    identityHash String         @unique
    // 'identityType' = The identity type.	[1]
    identityType IdentifierType
    // 'salt' = If the identityHash is hashed, this should contain the string used to salt the hash. If this value is not provided, it should be assumed that the hash was not salted.	[0..1]
    salt         String?

    // Model relationships
    AchievementSubject   AchievementSubject? @relation(fields: [achievementSubjectId], references: [docId], name: "achievementSubject")
    achievementSubjectId String?             @db.ObjectId
}

model AchievementSubjectProfile {
    id                   String             @id @default(auto()) @map("_id") @db.ObjectId
    name                 String? // The name of the entity or organization.	[0..1]
    url                  String? // URI	The homepage or social media profile of the entity, whether individual or institutional. Should be a URL/URI Accessible via HTTP.	[0..1]
    phone                String? // PhoneNumber	A phone number.	[0..1]
    description          String? // A short description of the issuer entity or organization.	[0..1]
    email                String? // EmailAddress	An email address.	[0..1]
    familyName           String? // Family name. In the western world, often referred to as the 'last name' of a person.	[0..1]
    givenName            String? // Given name. In the western world, often referred to as the 'first name' of a person.	[0..1]
    additionalName       String? // Additional name. Includes what is often referred to as 'middle name' in the western world.	[0..1]
    patronymicName       String? // Patronymic name.	[0..1]
    honorificPrefix      String? // Honorific prefix(es) preceding a person's name (e.g. 'Dr', 'Mrs' or 'Mr').	[0..1]
    honorificSuffix      String? // Honorific suffix(es) following a person's name (e.g. 'M.D, PhD').	[0..1]
    familyNamePrefix     String? // Family name prefix. As used in some locales, this is the leading part of a family name (e.g. 'de' in the name 'de Boer').	[0..1]
    dateOfBirth          String? // Date	Birthdate of the person.	[0..1]
    subject              AchievementSubject @relation(fields: [achievementSubjectId], references: [docId])
    achievementSubjectId String             @unique @db.ObjectId
}

// https://www.imsglobal.org/spec/ob/v3p0/#credentialsubject
// Claims about the credential subject. Maps to Credential Subject as defined in the [VC-DATA-MODEL].
model CredentialSubject {
    docId  String  @id @default(auto()) @map("_id") @db.ObjectId
    // The identity of the credential subject.	[0..1]
    id String?

    // Model relationships
    VerifiableCredential VerifiableCredential[]

    // *NOTE: This class can be extended with additional properties.
}

// https://www.imsglobal.org/spec/ob/v3p0/#achievementcredential
// AchievementCredentials are representations of an awarded achievement, used to share information about a achievement belonging to one earner. Maps to a Verifiable Credential as defined in the [VC-DATA-MODEL-2.0].
model AchievementCredential {
    docId                  String                  @id @default(auto()) @map("_id") @db.ObjectId
    // '@context' = The value of the @context property MUST be an ordered set where the first item is a URI with the value 'https://www.w3.org/ns/credentials/v2', and the second item is a URI with the value 'https://purl.imsglobal.org/spec/ob/v3p0/context-3.0.3.json'. [1..*]
    // Should include 'https://www.w3.org/ns/credentials/v2'- maybe first, and replace 'v1' URI?
    context             String[]
    // The value of the 'type' property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementCredential'. [1..*]
    type                String[]
    // Unambiguous reference to the credential. [1]
    id                 String
    // 'name' = The name of the credential for display purposes in wallets. For example, in a list of credentials and in detail views.	[1]
    name                String
    // 'description' = The short description of the credential for display purposes in wallets.	[0..1]
    description         String?
    // 'image' = The image representing the credential for display purposes in wallets.	[0..1]
    image               Image?                  @relation(fields: [imageId], references: [docId])
    imageId             String?                 @db.ObjectId
    // 'awardedDate' = Timestamp of when the credential was awarded. validFrom is used to determine the most recent version of a Credential in conjunction with issuer and id. Consequently, the only way to update a Credental is to update the validFrom, losing the date when the Credential was originally awarded. awardedDate is meant to keep this original date. [0..1]
    awardedDate         String?
    // 'credentialSubject' = The recipient of the achievement.	[1]
    credentialSubject   AchievementSubject      @relation(fields: [credentialSubjectId], references: [docId])
    credentialSubjectId String                  @db.ObjectId
    // 'endorsement' = Allows endorsers to make specific claims about the credential, and the achievement and profiles in the credential. These endorsements are signed with a Data Integrity proof format.	[0..*]
    endorsement         EndorsementCredential[] @relation("achievementCredential") //optional
    // 'endorsementJwt' = Allows endorsers to make specific claims about the credential, and the achievement and profiles in the credential. These endorsements are signed with the VC-JWT proof format.	[0..*]
    // 'endorsementJwt' = A String in Compact JWS format.
    endorsementJwt      String[] // optional
    // 'evidence' = A description of the work that the recipient did to earn the achievement. This can be a page that links out to other pages if linking directly to the work is infeasible.	[0..*]
    evidence            Evidence[]              @relation("achievementCredential") //optional
    // 'issuer' = A description of the individual, entity, or organization that issued the credential.	[1]
    issuer              Profile                 @relation(fields: [issuerId], references: [docId])
    issuerId            String                  @db.ObjectId
    // 'validFrom' = Timestamp of when the credential becomes valid.	[1]
    validFrom           String
    // 'validUntil' = If the credential has some notion of validity period, this indicates a timestamp when a credential should no longer be considered valid. After this time, the credential should be considered invalid.	[0..1]
    validUntil          String?
    // 'proof' = If present, one or more embedded cryptographic proofs that can be used to detect tampering and verify the authorship of the credential.	[0..*]
    proof               Proof[]                 @relation("achievementCredential") //optional
    // 'credentialSchema' = The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine if the provided data conforms to the provided schema.	[0..*]
    credentialSchema    CredentialSchema[]      @relation("achievementCredential") //optional
    // 'credentialStatus' = The information in CredentialStatus is used to discover information about the current status of a verifiable credential, such as whether it is suspended or revoked.	[0..1]
    credentialStatus    CredentialStatus?       @relation(fields: [credentialStatusId], references: [docId])
    credentialStatusId  String?                 @db.ObjectId
    // 'refreshService' = The information in RefreshService is used to refresh the verifiable credential.	[0..1]
    refreshService      RefreshService?         @relation(fields: [refreshServiceId], references: [docId])
    refreshServiceId    String?                 @db.ObjectId
    // 'termsOfUse' = The value of the termsOfUse property tells the verifier what actions it is required to perform (an obligation), not allowed to perform (a prohibition), or allowed to perform (a permission) if it is to accept the verifiable credentia	[0..*]
    termsOfUse          TermsOfUse[]            @relation("achievementCredential") //optional

    // *NOTE: This class can be extended with additional properties.
}

// https://www.imsglobal.org/spec/ob/v3p0/#verifiablecredential
// A Verifiable Credential as defined in the [VC-DATA-MODEL-2.0]. As described in § 8. Proofs (Signatures), at least one proof mechanism, and the details necessary to evaluate that proof, MUST be expressed for a credential to be a verifiable credential. In the case of an embedded proof, the credential MUST append the proof in the proof property.
model VerifiableCredential {
    docId                  String             @id @default(auto()) @map("_id") @db.ObjectId
    // '@context' = 	The value of the @context property MUST be an ordered set where the first item is a URI with the value 'https://www.w3.org/ns/credentials/v2'.	[1..*]
    // Should include 'https://www.w3.org/ns/credentials/v2'- maybe first, and replace 'v1' URI?
    context             String[]
    // Unambiguous reference to the credential.	[0..1]
    id                 String
    // 'type' = The value of the type property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential'.	[1..*]
    type                String[]
    // 'issuer' = A description of the individual, entity, or organization that issued the credential.	[1]
    issuer              Profile            @relation(fields: [issuerId], references: [docId])
    issuerId            String             @db.ObjectId
    // 'validFrom' = Timestamp of when the credential becomes valid.	[1]
    validFrom           String
    // 'validUntil' = If the credential has some notion of validity period, this indicates a timestamp when a credential should no longer be considered valid. After this time, the credential should be considered invalid.	[0..1]
    validUntil          String?
    // 'credentialSubject' = The subject of the credential.	[1]
    credentialSubject   CredentialSubject  @relation(fields: [credentialSubjectId], references: [docId])
    credentialSubjectId String             @db.ObjectId
    // 'proof' = If present, one or more embedded cryptographic proofs that can be used to detect tampering and verify the authorship of the credential.	[0..*]
    proof               Proof[]            @relation("verifiableCredential") //optional
    // 'credentialSchema' = The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine if the provided data conforms to the provided schema.	[0..*]
    credentialSchema    CredentialSchema[] @relation("verifiableCredential") //optional
    // 'credentialStatus' = The information in CredentialStatus is used to discover information about the current status of a verifiable credential, such as whether it is suspended or revoked.	[0..1]
    credentialStatus    CredentialStatus?  @relation(fields: [credentialStatusId], references: [docId])
    credentialStatusId  String?            @db.ObjectId
    // 'refreshService' = The information in RefreshService is used to refresh the verifiable credential.	[0..1]
    refreshService      RefreshService?    @relation(fields: [refreshServiceId], references: [docId])
    refreshServiceId    String?            @db.ObjectId
    // 'termsOfUse' = The value of the termsOfUse property tells the verifier what actions it is required to perform (an obligation), not allowed to perform (a prohibition), or allowed to perform (a permission) if it is to accept the verifiable credentia	[0..*]
    termsOfUse          TermsOfUse[]       @relation("verifiableCredential") //optional
}

// https://www.imsglobal.org/spec/ob/v3p0#evidence
// Descriptive metadata about evidence related to the achievement assertion. Each instance of the evidence class present in an assertion corresponds to one entity, though a single entry can describe a set of items collectively. There may be multiple evidence entries referenced from an assertion. The narrative property is also in scope of the assertion class to provide an overall description of the achievement related to the assertion in rich text. It is used here to provide a narrative of achievement of the specific entity described. If both the description and narrative properties are present, displayers can assume the narrative value goes into more detail and is not simply a recapitulation of description.
model Evidence {
    docId          String   @id @default(auto()) @map("_id") @db.ObjectId
    // The URL of a webpage presenting evidence of achievement or the evidence encoded as a Data URI. The schema of the webpage is undefined. [0..1]
    id         String?
    // 'type' = The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Evidence'. [1..*]
    type        String[]
    // 'narrative' = A narrative that describes the evidence and process of achievement that led to an assertion. Markdown is allowed. [0..1]
    narrative   String?
    // 'name' = A descriptive title of the evidence. [0..1]
    name        String?
    // 'description' = A longer description of the evidence. [0..1]
    description String?
    // 'genre' = A string that describes the type of evidence. For example, Poetry, Prose, Film. [0..1]
    genre       String?
    // 'audience' = A description of the intended audience for a piece of evidence. [0..1]
    audience    String?

    // Model relationships
    AchievementCredential   AchievementCredential? @relation(fields: [achievementCredentialId], references: [docId], name: "achievementCredential")
    achievementCredentialId String?                @db.ObjectId

    // *NOTE: This class can be extended with additional properties.
}

// https://www.imsglobal.org/spec/ob/v3p0/#result
// Describes a result that was achieved.
model Result {
    id                String            @id @default(auto()) @map("_id") @db.ObjectId
    // 'type' = The value of the type property MUST be an unordered set. One of the items MUST be the IRI 'Result'.	[1..*]
    type              String[]
    // 'achievedLevel' = If the result represents an achieved rubric criterion level (e.g. Mastered), the value is the id of the RubricCriterionLevel in linked ResultDescription.	[0..1]
    achievedLevel     String?
    // 'alignment' = The alignments between this result and nodes in external frameworks. This set of alignments are in addition to the set of alignments defined in the corresponding ResultDescription object.	[0..*]
    alignment         Alignment[]       @relation("result") // optional
    // 'resultDescription' = An achievement can have many result descriptions describing possible results. The value of resultDescription is the id of the result description linked to this result. The linked result description must be in the achievement that is being asserted.	[0..1]
    resultDescription String?
    // 'status' = The status of the achievement. Required if resultType of the linked ResultDescription is Status.	[0..1]
    status            ResultStatusType?
    // 'value' = A string representing the result of the performance, or demonstration, of the achievement. For example, 'A' if the recipient received an A grade in class.	[0..1]
    value             String?

    // Model relationships
    AchievementSubject   AchievementSubject? @relation(fields: [achievementSubjectId], references: [docId], name: "achievementSubject")
    achievementSubjectId String?             @db.ObjectId

    // *NOTE: This class can be extended with additional properties.
}

enum ResultStatusType {
    Completed
    Enrolled
    Failed
    InProgress
    OnHold
    Provisional
    Withdrew
}

// https://www.imsglobal.org/spec/ob/v3p0#org.1edtech.ob.v3p0.endorsementcredential.class
// A verifiable credential that asserts a claim about an entity. At least one proof mechanism, and the details necessary to evaluate that proof, MUST be expressed for a credential to be a verifiable credential. In the case of an embedded proof, the credential MUST append the proof in the proof property.
model EndorsementCredential {
    docId                  String             @id @default(auto()) @map("_id") @db.ObjectId
    // '@context' = 	The value of the @context property MUST be an ordered set where the first item is a URI with the value 'https://www.w3.org/ns/credentials/v2', and the second item is a URI with the value 'https://purl.imsglobal.org/spec/ob/v3p0/context-3.0.3.json'. [1..*]
    // Should include 'https://www.w3.org/ns/credentials/v2'- maybe first, and replace 'v1' URI?
    context             String[]
    // The value of the 'type' property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementCredential'. [1..*]
    type                String[]
    // Unambiguous reference to the credential. [1]
    id                 String
    // 'name' = 	The name of the credential for display purposes in wallets. [1]
    name                String
    // 'description' = The description of the credential for display purposes in wallets. [0..1]
    description         String?
    // 'credentialSubject' = The individual, entity, organization, assertion, or achievement that is endorsed and the endorsement comment. [1]
    credentialSubject   EndorsementSubject @relation(fields: [credentialSubjectId], references: [docId])
    credentialSubjectId String             @db.ObjectId
    // 'awardedDate' = Timestamp of when the credential was awarded. validFrom is used to determine the most recent version of a Credential in conjunction with issuer and id. Consequently, the only way to update a Credental is to update the validFrom, losing the date when the Credential was originally awarded. awardedDate is meant to keep this original date.	[0..1]
    awardedDate         String?
    // 'issuer' = A description of the individual, entity, or organization that issued the credential. [1]
    issuer              Profile            @relation(fields: [issuerId], references: [docId], name: "EndorsementCredentialIssuerProfile")
    issuerId            String             @db.ObjectId
    // 'validFrom' = Timestamp of when the credential becomes valid.	[1]
    validFrom           String
    // 'validUntil' = If the credential has some notion of validity period, this indicates a timestamp when a credential should no longer be considered valid. After this time, the credential should be considered invalid.	[0..1]
    validUntil          String?
    // 'proof' = If present, one or more embedded cryptographic proofs that can be used to detect tampering and verify the authorship of the credential. [0..*]
    proof               Proof[]
    // 'credentialSchema' = The value of the credentialSchema property MUST be one or more data schemas that provide verifiers with enough information to determine if the provided data conforms to the provided schema. [0..*]
    credentialSchema    CredentialSchema[]
    // 'credentialStatus' = The information in CredentialStatus is used to discover information about the current status of a verifiable credential, such as whether it is suspended or revoked. [0..1]
    credentialStatus    CredentialStatus?  @relation(fields: [credentialStatusId], references: [docId])
    credentialStatusId  String?            @db.ObjectId
    // 'refreshService' = 	The information in RefreshService is used to refresh the verifiable credential. [0..1]
    refreshService      RefreshService?    @relation(fields: [refreshServiceId], references: [docId])
    refreshServiceId    String?            @db.ObjectId
    // 'termsOfUse' = 	The value of the termsOfUse property tells the verifier what actions it is required to perform (an obligation), not allowed to perform (a prohibition), or allowed to perform (a permission) if it is to accept the verifiable credentia. [0..*]
    termsOfUse          TermsOfUse[]

    Achievement             Achievement?           @relation(fields: [achievementId], references: [docId], name: "achievement")
    achievementId           String?                @db.ObjectId
    AchievementCredential   AchievementCredential? @relation(fields: [achievementCredentialId], references: [docId], name: "achievementCredential")
    achievementCredentialId String?                @db.ObjectId
    profile                 Profile                @relation(fields: [profileId], references: [docId])
    profileId               String                 @db.ObjectId
}

// https://www.imsglobal.org/spec/ob/v3p0#org.1edtech.ob.v3p0.endorsementsubject.class
// A collection of information about the subject of the endorsement.
// *NOTE: This class can be extended with additional properties.
model EndorsementSubject {
    docId                 String   @id @default(auto()) @map("_id") @db.ObjectId
    // The identifier of the individual, entity, organization, assertion, or achievement that is endorsed. [1]
    id                String
    // 	The value of the 'type' property MUST be an unordered set. One of the items MUST be the URI 'VerifiableCredential', and one of the items MUST be the URI 'EndorsementCredential'. [1..*]
    type               String[]
    // 'endorsementComment' = Allows endorsers to make a simple claim in writing about the entity. [0..1]
    endorsementComment String? // A String that may contain Markdown.

    // Model relationships
    EndorsementCredential EndorsementCredential[]

    // *NOTE: This class can be extended with additional properties.
}

// https://www.imsglobal.org/spec/ob/v3p0#org.1edtech.ob.v3p0.credentialstatus.class
// The information in CredentialStatus is used to discover information about the current status of a verifiable credential, such as whether it is suspended or revoked.
model CredentialStatus {
    docId   String @id @default(auto()) @map("_id") @db.ObjectId
    // The value MUST be the URL of the issuer's credential status method. [1]
    id  String
    // 	'type' = The name of the credential status method. [1]
    type String

    // Model relationships
    EndorsementCredential EndorsementCredential[]
    AchievementCredential AchievementCredential[]
    VerifiableCredential  VerifiableCredential[]

    // *NOTE: This class can be extended with additional properties.
}

// https://www.imsglobal.org/spec/ob/v3p0#org.1edtech.ob.v3p0.refreshservice.class
// The information in RefreshService is used to refresh the verifiable credential.
model RefreshService {
    docId   String @id @default(auto()) @map("_id") @db.ObjectId
    // The value MUST be the URL of the issuer's refresh service. [1]
    id  String
    // 	'type' = The name of the refresh service method. [1]
    type String

    // Model relationships
    EndorsementCredential EndorsementCredential[]
    AchievementCredential AchievementCredential[]
    VerifiableCredential  VerifiableCredential[]

    // *NOTE: This class can be extended with additional properties.
}
